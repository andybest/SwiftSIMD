{% include "HeaderBoilerplate.stencil" %}

/* This file is automatically generated by the GenBoilerplate target */

import Foundation
import simd

extension {{ vectorType }} {
    /// A vector with all elements initialized to 0
    public var zero: {{ vectorType }} { return {{ vectorType }}() }
    
    /// The length of the vector
    public var length: {{ scalarType }} { return simd.length(self) }
    
    /// The elements of the vector as an array
    public var array: [{{ scalarType}}] {
        return [x, y{% if numElements > 2 %}, z{% endif %}{% if numElements > 3 %}, w{% endif %}]
    }
    
    /// Returns a vector with all elements normalized so that the length equals zero
    public var normalized: {{ vectorType }} {
        return simd.normalize(self)
    }
    
    /// Sum of the elements in the vector
    public var summedElements: {{ scalarType }} {
        return simd.reduce_add(self)
    }
    
    /// Minimum element of the vector
    public var minElement: {{ scalarType }} {
        return simd.reduce_min(self)
    }
    
    /// Maximum element of the vector
    public var maxElement: {{ scalarType }} {
        return simd.reduce_max(self)
    }
    
    /// The dot product of the vector and the parameter
    public func dot(_ other: {{ vectorType }}) -> {{ scalarType }} {
        return simd.dot(self, other)
    }
    
    {% if numElements < 4 %}
    /// The cross product of the vector and the parameter
    public func cross(_ other: {{ vectorType }}) -> {{ crossTypeName }} {
        return simd.cross(self, other)
    }
    {% endif %}
    
    /// Linear interpolation between the vector and a given vector by t
    public func interpolated(with other: {{ vectorType }}, by t: {{ scalarType }}) -> {{ vectorType }} {
        return simd.mix(self, other, t: t)
    }
    
    /// Vector-scalar minimum. Each component of the result is the minimum of the corresponding element of the vector
    /// and the scalar
    public func min(_ scalar: {{ scalarType }}) -> {{ vectorType }} {
        return simd.min(self, scalar)
    }
    
    /// Vector-scalar maximum. Each component of the result is the maximum of the corresponding element of the vector
    /// and the scalar
    public func max(_ scalar: {{ scalarType }}) -> {{ vectorType }} {
        return simd.max(self, scalar)
    }
    
    /// Clamp each element of the vector between the corresponding elements of the given min/max vectors
    public func clamped(min: {{ vectorType }}, max: {{ vectorType }}) -> {{ vectorType }} {
        return simd.clamp(self, min: min, max: max)
    }
    
    /// Clamp the vector between the given scalar values
    public func clamped(min: {{ scalarType }}, max: {{ scalarType }}) -> {{ vectorType }} {
        return simd.clamp(self, min: min, max: max)
    }
}